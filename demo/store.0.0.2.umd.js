!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports):"function"==typeof define&&define.amd?define(["exports"],t):t(e.store={})}(this,function(e){"use strict";const t={string:{name:"string",checker:e=>"string"==typeof e},number:{name:"number",checker:e=>"number"==typeof e},boolean:{name:"boolean",checker:e=>"boolean"==typeof e},null:{name:"null",checker:e=>null===typeof e},undefined:{name:"undefined",checker:e=>void 0===e},date:{name:"date",checker:e=>e instanceof Date}},s={_isDispatched:!0},r={descriptions:new Map,state:new Map,listeners:new Map,describeStore(e){if(this.descriptions.has(e.identifier))throw new Error("You can't describe a new store with the same identifier as a previously described one.");this.descriptions.set(e.identifier,{...e.model})},getStoreDescriptions(){return this.descriptions},getStoreDescription(e){if(!this.descriptions.has(e))throw new Error("You're trying to get a store description that doesn't exists.");return this.descriptions.get(e)},getGlobalState(){return this.state},getState(e){const t=this.state.get(e).currentState;return this.state.get(e)._data.slice(t,t+1)[0]},dispatch({identifier:e,model:t}){const r=this.getStoreDescription(e);Object.keys(t).forEach(e=>{if(!r[e].checker(t[e]))throw new Error(`Type "${typeof t[e]}" cannot be setted to the property ${e} described as a "${r[e].name}"`)});const i=this.state.get(e);let n,o;void 0!==i?(o=Object.assign({},i._data.slice(-1)[0],t),n=[...i._data,o]):(n=[t],o=t);const a=n.length-1;this.state.set(e,{...s,currentState:a,_data:n}),this.listeners.has(e)?this.listeners.get(e)(o):console.warn("A store has changed but it has no listener attached to it.")},travelForwards(e){const t=this.state.get(e),s=t.currentState+1;s>=t._data.length?console.warn("You can't keep traveling forwards within this store"):(this.state.set(e,{...t,currentState:s}),this.listeners.get(e)(this.getState(e)))},travelBackwards(e){const t=this.state.get(e),s=t.currentState-1;s<0?console.warn("You can't keep traveling backwards within this store"):(this.state.set(e,{...t,currentState:s}),this.listeners.get(e)(this.getState(e)))},travelTo(e,t){},subscribe(e,t){if(void 0===e)throw new Error("The subscription method needs a store to subscribe to");if("function"!=typeof t)throw new Error("Subscribe listener is expected to be a function.");if(!this.descriptions.has(e))throw new Error("You're tyring to subscribe changes for a non-existent store.");if(this.listeners.has(e))throw new Error("You're trying to set a listener to a store that already has a listener attached to it.");this.listeners.set(e,t)}};e.types=t,e.store=r,Object.defineProperty(e,"__esModule",{value:!0})});
